extern crate oblivc;

// bindings generated by build.rs
include!(concat!(env!("OUT_DIR"), "/millionaire.rs"));

#[cfg(test)]
mod tests {
    use super::*;
    use std::thread;

    #[test]
    fn test_millionaire() {
        // run server (party 1) in new thread
        let server = thread::spawn(|| {
            let mut args = millionaire_args {
                input: 10,
                output: 0,
            };
            oblivc::protocol_desc()
                .party(1)
                .accept("56734").unwrap()
                .exec_yao_protocol(millionaire, &mut args);
        });
        // run client (party 2) in main thread
        let mut args = millionaire_args {
            input: 20,
            output: 0,
        };
        oblivc::protocol_desc()
            .party(2)
            .connect("localhost", "56734").unwrap()
            .exec_yao_protocol(millionaire, &mut args);
        // wait for server to finish
        server.join().unwrap();
        // party 1 < party 2
        assert!(args.output == -1);
    }
}
